"""Adding Tax and Tip to the bill"""
def tax(bill):
    """Adds 8% tax to a restaurant bill."""
    bill *= 1.08
    print "With tax: %f" % bill
    return bill

def tip(bill):
    """Adds 15% tip to a restaurant bill."""
    bill *= 1.15
    print "With tip: %f" % bill
    return bill
    
meal_cost = 100
meal_with_tax = tax(meal_cost)
meal_with_tip = tip(meal_with_tax)



"""Squaring a Number"""
def square(n):
    """Returns the square of a number."""
    squared = n**2
    print "%d squared is %d." % (n, squared)
    return squared
 
square(10)



"""Exponents"""
def power(base, exponent): 
    result = base**exponent
    print "%d to the power of %d is %d." % (base, exponent, result)

power(37,4) 



"""Checking if its Even"""
def is_even(x):
    if x % 2 == 0:
        return True
    else:
        return False
 
 
 
 """Checking if its an Integer"""
 def is_int(x):
    if x == int(x):
        return True
    else:
        return False


        
"""Adding each digit together"""
def digit_sum(n):
    #assume the number you are given will always be positive
    digitsum = 0
    while n > 0:
        mod10 = n % 10
        digitsum = digitsum + mod10
        n = n // 10
    return digitsum
    
   
   
"""Factorial (Recursion Method)"""
def factorial(x):
    if x == 1 or x == 0:
        return 1
    else: 
        return x * factorial(x-1)
        
        
      
 """Checking if its a Prime Number"""
 def is_prime(x):
    if x < 2:
        return False
    
    for i in range(2, x - 1):
        if x % i == 0:
            return False
            
    return True #this is becaue if x = 2, it will jump straight to this line. no need for 'else:' or it will return error.



"""Reverse a String"""
def reverse(text):
    reverse_text = "" #empty string
    letters = len(text)
    while letters > 0:
        reverse_text += text[letters - 1]
        letters -= 1
    return reverse_text
    
 
"""Removing all Vowels in a String"""
def anti_vowel(text):
    vowels = "aeiouAEIOU"
    antivowel_string = "" 
    
    for letter in text:
        if letter not in vowels:
            antivowel_string += letter
    
    return antivowel_string

print anti_vowel("Hey You!")



"""Adding up Scrabble Word Scores"""
score = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2, 
         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3, 
         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1, 
         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4, 
         "x": 8, "z": 10}

def scrabble_score(word):
    score_total = 0 #scrabble score total of the scrabble word
    word = word.lower() #transforms the word to lowercase letters
    for i in word: 
        score_total += score[i]
    return score_total
    
print scrabble_score("acb") #should print 1+3+3=7



"""Censoring words"""
#simple solution to censoring swear words
#should return the 'text' with the 'word' replaced with asterisks
#assume your input strings won't contain punctuation or upper case letters
def censor(text, word):
    word_length = len(word)
    new_word = ""
    
    while word_length > 0:
        new_word += '*'
        word_length -= 1
    
    return text.replace(word, new_word)
    
print censor("fuck man come check this fuck out", "fuck")



"""Count Method"""
#counts the number of times an item occurs in the list
def count(sequence, item):
    result = 0
    for i in sequence:
        if i == item:
            result += 1
    return int(result)

print count([1,2,1,1], 1) #should return 3
print count(['a', 'b', 'a', 'a'], 'a') #should also return 3



"""Removes all Odd Numbers in a List"""
#removes all odd numbers in the list and returns the result
def purify(listofnumbers):
    new_list = []
    for i in listofnumbers:
        if i % 2 == 0:
            new_list.append(i)
    return new_list

print purify([1,2,3]) # returns [2]



"""Multiplying a list of Numbers"""
def product(integers):
    result = 1
    for i in integers:
        result *= i
    return int(result)

print product([4,5,5])
print product([0,3,2])



"""Removing Duplicates in a List"""
def remove_duplicates(inputlist):
    new_list = []
    for i in inputlist:
        if i not in new_list:
            new_list.append(i)
    return new_list

print remove_duplicates([1,1,2,2])
print remove_duplicates(['a', 'a', 'b', 'b'])



"""Find the Median in a List of Numbers"""
def median(listofnumbers):
    sortedlist = sorted(listofnumbers)
    
    if len(sortedlist) % 2 == 0:
        i = len(sortedlist) / 2
        middle_two = sortedlist[i] + sortedlist[i-1]
        result = middle_two / 2.0 #must be a float 
    else:
        i = len(sortedlist) // 2
        result = sortedlist[i]
    return result

print median([7,3,1,4])
print median([7,12,3,1,6])



"""Grades Statistics"""
grades = [100, 100, 90, 40, 80, 100, 85, 70, 90, 65, 90, 85, 50.5]

def print_grades(grades):
    for grade in grades:
        print grade,

print "Your grades this semester: ", print_grades(grades)

def grades_sum(grades):
    result = 0
    for grade in grades: 
        result += grade
    return result
    
print "Sum: ", grades_sum(grades)
    
def grades_average(grades):
    average = grades_sum(grades) / float(len(grades))
    return average

print "Average: ", grades_average(grades)

def grades_variance(scores):
    average = grades_average(scores)
    variance = 0
    for score in scores:
        variance += (average - score) ** 2
    result = variance / len(scores)
    return result

print "Variance: ", grades_variance(grades)

def grades_std_deviation(variance):
    return variance ** 0.5

variance = grades_variance(grades)

print "Standard Deviation: ", grades_std_deviation(variance)



"""Prints Only Even Numbers from 0 to 50 (inclusive)"""
evens_to_50 = [i for i in range(51) if i % 2 == 0]
print evens_to_50



"""List Comprehension Syntax"""
new_list = [x for x in range(1,6)]
# => [1, 2, 3, 4, 5]

doubles = [x*2 for x in range(1,6)]
# => [2, 4, 6, 8, 10]

#doubled number that are evenly divisible by three:
doubles_by_3 = [x*2 for x in range(1,6) if (x*2)%3 == 0]
# => [6]

#the squares of even numbers between 1 to 11
even_squares = [x**2 for x in range(1,12) if x % 2 == 0]
# => [4, 16, 36, 64, 100]

#prints list of cubes of the numbers 1 through 10 only if the cube is divisible by four 
cubes_by_four = [x**3 for x in range (1,11) if (x**3) % 4 == 0]
# =>[8, 64, 216, 512, 1000]

""" 
